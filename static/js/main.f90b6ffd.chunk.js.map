{"version":3,"sources":["Markdown.js","CodeList.jsx","App.js","serviceWorker.js","index.js"],"names":["Markdown","file","useState","data","setData","useEffect","fetch","then","response","text","Fade","in","style","transitionDelay","unmountOnExit","CircularProgress","color","size","thickness","innerHTML","renderToString","source","className","sourcePos","includeNodeIndex","linkTarget","StyledListItemIcon","withStyles","root","minWidth","ListItemIcon","StyledListItem","margin","paddingTop","paddingBottom","ListItem","StyledList","List","useStyles","makeStyles","theme","sidebar","padding","paddingLeft","CodeListFolder","children","folderName","depth","isCollapseOpen","setIsCollapseOpen","component","aria-labelledby","button","onClick","ListItemText","primary","ExpandLess","ExpandMore","Collapse","timeout","CodeListFile","filepath","filename","setCurrentOpen","disablePadding","CodeList","classes","getCodeList","jsonObj","map","obj","type","name","key","path","codelist","width","backgroundColor","palette","background","paper","code","scroll","menuButton","marginRight","spacing","App","setFilename","React","isDrawerOpen","setIsDrawerOpen","useTheme","isWindowMobile","useMediaQuery","breakpoints","down","AppBar","position","Toolbar","variant","IconButton","edge","aria-label","Typography","SwipeableDrawer","anchor","open","onClose","onOpen","Container","Card","proxyurl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2OAmDeA,EA5CE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACLC,mBAAS,IADJ,mBACtBC,EADsB,KAChBC,EADgB,KAY7B,OAVAC,qBAAU,WACRC,MAAML,GACHM,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACLL,EAAQK,QAEX,CAACR,IAES,KAATE,EAEA,kBAACO,EAAA,EAAD,CACEC,IAAI,EACJC,MAAO,CACLC,gBAA0B,KAATV,EAAc,QAAU,OAE3CW,eAAa,GAEb,6BACE,kBAACC,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,GAAIC,UAAW,IAAM,IAD/D,eASJ,kBAAC,IAAD,CAAWC,WAAW,GACnBC,yBACC,kBAAC,IAAD,CACEC,OAAQlB,EACRmB,UAAU,gBACVC,WAAS,EACTC,kBAAgB,EAChBC,WAAW,c,yHC7BfC,EAAqBC,YAAW,CACpCC,KAAM,CACJC,SAAU,SAFaF,CAIxBG,KAEGC,EAAiBJ,YAAW,CAChCC,KAAM,CACJI,OAAQ,EACRC,WAAY,EACZC,cAAe,IAJIP,CAMpBQ,KAEGC,EAAaT,YAAW,CAC5BC,KAAM,CACJI,OAAQ,EACRC,WAAY,EACZC,cAAe,IAJAP,CAMhBU,KAEGC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,QAAS,CACPC,QAAS,OACTC,YAAa,EACbd,SAAU,aAMDe,EAAiB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,MAAY,EACrB7C,oBAAS,GADY,mBAC1D8C,EAD0D,KAC1CC,EAD0C,KAEjE,OACE,kBAACb,EAAD,CAAYc,UAAU,MAAMC,kBAAgB,yBAC1C,kBAACpB,EAAD,CACEqB,QAAM,EACNC,QAAS,kBACUJ,GAAjBD,IAEFpC,MAAO,CAAE+B,YAAY,GAAD,OAXG,GAW2BI,EAA9B,QAEpB,kBAACrB,EAAD,KACE,kBAAC,IAAD,OAEF,kBAAC4B,EAAA,EAAD,CAAcC,QAAST,IACtBE,EAAiB,kBAACQ,EAAA,EAAD,MAAiB,kBAACC,EAAA,EAAD,OAErC,kBAACC,EAAA,EAAD,CAAU/C,GAAIqC,EAAgBW,QAAQ,OAAO7C,eAAa,GACvD+B,KAMIe,EAAe,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,eAAgBhB,EAAY,EAAZA,MACjE,OACE,kBAACX,EAAD,CAAYc,UAAU,MAAMc,gBAAc,GACxC,kBAACjC,EAAD,CACEqB,QAAM,EACNC,QAAS,kBAAMU,EAAeF,IAC9BjD,MAAO,CAAE+B,YAAY,GAAD,OAhCG,GAgC2BI,EAA9B,QAEpB,kBAACrB,EAAD,KACE,kBAAC,IAAD,OAEF,kBAAC4B,EAAA,EAAD,CAAcC,QAASO,OAqChBG,EATE,SAAC,GAAwB,IAAtBF,EAAqB,EAArBA,eACZG,EAAU5B,IAChB,OACE,yBAAKhB,UAAW4C,EAAQzB,SAzBD,SAAd0B,EAAeC,EAASL,EAAgBhB,GACnD,OAAOqB,EAAQC,KAAI,SAACC,GAClB,MAAiB,WAAbA,EAAIC,KAEJ,kBAAC,EAAD,CAAgBzB,WAAYwB,EAAIE,KAAMC,IAAKH,EAAII,KAAM3B,MAAOA,EAAQ,GACjEoB,EAAYG,EAAIzB,SAAUkB,EAAgBhB,EAAQ,IAKrD,kBAAC,EAAD,CACEe,SAAUQ,EAAIE,KACdX,SAAUS,EAAII,KACdX,eAAgBA,EAChBU,IAAKH,EAAII,KACT3B,MAAOA,EAAQ,OAWlBoB,CAAYQ,EAAS9B,SAAUkB,EAAgB,K,gGCnGhDzB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCZ,KAAM,CACJgD,MAAO,OACPC,gBAAiBrC,EAAMsC,QAAQC,WAAWC,OAE5CC,KAAM,CACJC,OAAQ,WACRjD,WAAY,QAEdkD,WAAY,CACVC,YAAa5C,EAAM6C,QAAQ,QA2DhBC,MAvDf,WACE,IAAMpB,EAAU5B,IADH,EAEmBpC,mBAAS,IAF5B,mBAEN4D,EAFM,KAEIyB,EAFJ,OAM2BC,IAAMtF,UAAS,GAN1C,mBAMNuF,EANM,KAMQC,EANR,KAQPlD,EAAQmD,cACRC,EAAiBC,YAAcrD,EAAMsD,YAAYC,KAAK,OAE5D,OACE,yBAAKzE,UAAW4C,EAAQtC,MACtB,kBAACoE,EAAA,EAAD,CAAQC,SAAS,SAASjF,MAAM,WAC9B,kBAACkF,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLhD,QAAS,kBAAMqC,GAAgB,IAC/BpE,UAAW4C,EAAQiB,WACnBnE,MAAM,UACNsF,aAAW,QAEX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYJ,QAAQ,KAAKnF,MAAM,WAA/B,kBAKJ,kBAACwF,EAAA,EAAD,CACEC,OAAQb,EAAiB,MAAQ,OACjCc,KAAMjB,EACNkB,QAAS,kBAAMjB,GAAgB,IAC/BkB,OAAQ,kBAAMlB,GAAgB,KAE9B,kBAAC,EAAD,CACE3B,eAAgB,SAACD,GACf4B,GAAgB,GAChBH,EAAYzB,OAIlB,kBAAC+C,EAAA,EAAD,CAAWvF,UAAW4C,EAAQe,MAC5B,kBAAC6B,EAAA,EAAD,CAAMlG,MAAO,CAAE8B,QAAS,SACR,KAAboB,EACC,kBAAC,EAAD,CAAU7D,KAAM8G,2GAAqBjD,IAErC,qCChEQkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpH,MAAK,SAAAqH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f90b6ffd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { renderToString } from \"react-dom/server\";\nimport Highlight from \"react-highlight\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst Markdown = ({ file }) => {\n  const [data, setData] = useState(\"\");\n  useEffect(() => {\n    fetch(file)\n      .then((response) => {\n        return response.text();\n      })\n      .then((text) => {\n        setData(text);\n      });\n  }, [file]);\n\n  if (data === \"\") {\n    return (\n      <Fade\n        in={true}\n        style={{\n          transitionDelay: data !== \"\" ? \"800ms\" : \"0ms\",\n        }}\n        unmountOnExit\n      >\n        <div>\n          <CircularProgress color=\"inherit\" size={20} thickness={6} />{\" \"}\n          Loading...\n        </div>\n      </Fade>\n    );\n  }\n\n  return (\n    <Highlight innerHTML={true}>\n      {renderToString(\n        <ReactMarkdown\n          source={data}\n          className=\"code-markdown\"\n          sourcePos\n          includeNodeIndex\n          linkTarget=\"_blank\"\n        />\n      )}\n    </Highlight>\n  );\n};\n\nexport default Markdown;\n","import React, { useState } from \"react\";\nimport {\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Collapse,\n  withStyles,\n} from \"@material-ui/core\";\nimport FolderIcon from \"@material-ui/icons/Folder\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport codelist from \"./code_list.json\";\n\nconst StyledListItemIcon = withStyles({\n  root: {\n    minWidth: \"32px\",\n  },\n})(ListItemIcon);\n\nconst StyledListItem = withStyles({\n  root: {\n    margin: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})(ListItem);\n\nconst StyledList = withStyles({\n  root: {\n    margin: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})(List);\n\nconst useStyles = makeStyles((theme) => ({\n  sidebar: {\n    padding: \"16px\",\n    paddingLeft: 0,\n    minWidth: \"320px\",\n  },\n}));\n\nconst LIST_ITEM_PADDING_LEFT = 16;\n\nexport const CodeListFolder = ({ children, folderName, depth }) => {\n  const [isCollapseOpen, setIsCollapseOpen] = useState(false);\n  return (\n    <StyledList component=\"nav\" aria-labelledby=\"nested-list-subheader\">\n      <StyledListItem\n        button\n        onClick={() =>\n          isCollapseOpen ? setIsCollapseOpen(false) : setIsCollapseOpen(true)\n        }\n        style={{ paddingLeft: `${LIST_ITEM_PADDING_LEFT * depth}px` }}\n      >\n        <StyledListItemIcon>\n          <FolderIcon />\n        </StyledListItemIcon>\n        <ListItemText primary={folderName} />\n        {isCollapseOpen ? <ExpandLess /> : <ExpandMore />}\n      </StyledListItem>\n      <Collapse in={isCollapseOpen} timeout=\"auto\" unmountOnExit>\n        {children}\n      </Collapse>\n    </StyledList>\n  );\n};\n\nexport const CodeListFile = ({ filepath, filename, setCurrentOpen, depth }) => {\n  return (\n    <StyledList component=\"div\" disablePadding>\n      <StyledListItem\n        button\n        onClick={() => setCurrentOpen(filepath)}\n        style={{ paddingLeft: `${LIST_ITEM_PADDING_LEFT * depth}px` }}\n      >\n        <StyledListItemIcon>\n          <InsertDriveFileIcon />\n        </StyledListItemIcon>\n        <ListItemText primary={filename} />\n      </StyledListItem>\n    </StyledList>\n  );\n};\n\nexport const getCodeList = (jsonObj, setCurrentOpen, depth) => {\n  return jsonObj.map((obj) => {\n    if (obj.type === \"folder\") {\n      return (\n        <CodeListFolder folderName={obj.name} key={obj.path} depth={depth + 1}>\n          {getCodeList(obj.children, setCurrentOpen, depth + 1)}\n        </CodeListFolder>\n      );\n    } else {\n      return (\n        <CodeListFile\n          filename={obj.name}\n          filepath={obj.path}\n          setCurrentOpen={setCurrentOpen}\n          key={obj.path}\n          depth={depth + 1}\n        />\n      );\n    }\n  });\n};\n\nconst CodeList = ({ setCurrentOpen }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.sidebar}>\n      {getCodeList(codelist.children, setCurrentOpen, 0)}\n    </div>\n  );\n};\n\nexport default CodeList;\n","import React, { useState } from \"react\";\nimport Markdown from \"./Markdown\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CodeList from \"./CodeList\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  code: {\n    scroll: \"overflow\",\n    paddingTop: \"16px\",\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [filename, setFilename] = useState(\"\");\n  const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  const baseurl =\n    \"https://raw.githubusercontent.com/geetesh-gupta/code-with-gg/master/\";\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n\n  const theme = useTheme();\n  const isWindowMobile = useMediaQuery(theme.breakpoints.down(\"md\"));\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"sticky\" color=\"inherit\">\n        <Toolbar variant=\"dense\">\n          <IconButton\n            edge=\"start\"\n            onClick={() => setIsDrawerOpen(true)}\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Code With GG\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <SwipeableDrawer\n        anchor={isWindowMobile ? \"top\" : \"left\"}\n        open={isDrawerOpen}\n        onClose={() => setIsDrawerOpen(false)}\n        onOpen={() => setIsDrawerOpen(true)}\n      >\n        <CodeList\n          setCurrentOpen={(filename) => {\n            setIsDrawerOpen(false);\n            setFilename(filename);\n          }}\n        />\n      </SwipeableDrawer>\n      <Container className={classes.code}>\n        <Card style={{ padding: \"16px\" }}>\n          {filename !== \"\" ? (\n            <Markdown file={proxyurl + baseurl + filename} />\n          ) : (\n            \"Use the sidebar to open a code\"\n          )}\n        </Card>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}